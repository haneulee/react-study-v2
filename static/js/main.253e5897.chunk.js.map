{"version":3,"sources":["components/Circle.tsx","routes/Test.tsx","api.ts","atoms.ts","components/BackButton.tsx","components/ToggleButton.tsx","routes/Chart.tsx","routes/Price.tsx","routes/Coin.tsx","routes/Coins.tsx","components/Categories.tsx","components/CreateToDo.tsx","components/ToDo.tsx","routes/ToDoList.tsx","Router.tsx","App.tsx","reportWebVitals.ts","theme.ts","index.tsx"],"names":["Container","styled","div","props","bgColor","Circle","bdColor","animation","keyframes","Btn","button","Emoji","span","Box","Input","input","attrs","required","Title","theme","textColor","Test","useState","value","setValue","as","href","onSubmit","event","preventDefault","console","log","type","placeholder","onChange","currentTarget","BASE_URL","fetchCoins","fetch","then","response","json","fetchCoinTickers","coinId","Categories","BackButton","history","useHistory","leftIcon","onClick","goBack","style","position","left","top","ToggleButton","useColorMode","colorMode","toggleColorMode","rightIcon","right","Chart","useQuery","endDate","Math","floor","Date","now","startDate","fetchCoinHistory","refetchInterval","isLoading","data","series","name","map","price","open","toFixed","high","low","close","x","time_open","y","options","mode","chart","height","width","background","grid","show","yaxis","tooltip","enabled","labels","colors","xaxis","datetimeFormatter","year","month","day","hour","dataLabels","formatter","Item","Price","useParams","tickersData","fontSize","padding","quotes","USD","percent_change_15m","percent_change_30m","percent_change_1h","percent_change_6h","percent_change_12h","percent_change_24h","percent_change_7d","percent_change_30d","percent_change_1y","volume_24h","volume_24h_change_24h","h1","Loader","Header","header","Wrapper","Overview","OverviewItem","Description","p","Tabs","Tab","isActive","accentColor","Coin","state","useLocation","priceMatch","useRouteMatch","chartMatch","fetchCoinInfo","infoLoading","infoData","tickersLoading","loading","Helmet","rank","symbol","description","total_supply","max_supply","to","path","CoinsList","ul","li","Img","img","Coins","slice","coin","pathname","id","src","toLowerCase","localStorageToDos","localStorage","getItem","parsedToDos","JSON","parse","localStorageCategories","parsedCategories","toDoState","atom","key","default","categoryState","TO_DO","categoriesState","DOING","DONE","toDoSelector","selector","get","toDos","category","filter","toDo","FormContainer","form","useRecoilState","setCategory","categories","setCategories","useForm","register","handleSubmit","onInput","c","random","find","window","alert","oldCategories","newCategories","setItem","stringify","colorScheme","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","oldToDos","newToDos","text","ToDoWrapper","ToDoButton","Button","ToDo","targetIndex","findIndex","newToDo","newToDoArr","color","ToDoContainer","ToDoList","Router","basename","App","initialIsOpen","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","breakpoints","createBreakpoints","sm","md","lg","xl","extendTheme","fonts","heading","defaultTheme","body","styles","global","backgroundColor","lineHeight","a","whiteSpace","borderRadius","_hover","boxShadow","_focus","textDecoration","outline","border","listStyle","queryClient","QueryClient","ReactDOM","render","StrictMode","client","resetCSS","document","getElementById"],"mappings":"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","file":"static/js/main.253e5897.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\ninterface CircleProps {\n  bgColor: string;\n  bdColor?: string;\n}\nconst Container = styled.div<CircleProps>`\n  background-color: ${(props) => props.bgColor};\n`;\n\nconst Circle = function ({ bgColor, bdColor }: CircleProps) {\n  return <Container bgColor={bgColor} bdColor={bdColor ?? bgColor} />;\n};\n\nexport default Circle;\n","import { useState } from \"react\";\nimport Circle from \"components/Circle\";\nimport styled, { keyframes } from \"styled-components\";\n\nconst animation = keyframes`\n0% {\n  transform: rotate(0deg);\n  border-radius: 0;\n}\n50% {\n  transform: rotate(360deg);\n  border-radius: 100px;\n}\n100% {\n  transform: rotate(0deg);\n  border-radius: 0;\n}\n`;\n\nconst Btn = styled.button`\n  color: white;\n  background-color: #4caf50; /* Green */\n  border: 0;\n  border-radius: 0.25rem;\n`;\n\nconst Emoji = styled.span`\n  font-size: 30px;\n`;\n\nconst Box = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 300px;\n  height: 300px;\n  background-color: skyblue;\n  animation: ${animation} 1s linear infinite;\n  ${Emoji} {\n    &:hover {\n      font-size: 50px;\n      &:active {\n        opacity: 0;\n      }\n    }\n  }\n`;\n\nconst Input = styled.input.attrs({ required: true })`\n  background-color: red;\n`;\n\nconst Title = styled.div`\n  color: ${(props) => props.theme.textColor};\n`;\n\nconst Test = function () {\n  const [value, setValue] = useState(\"\");\n  const onChange = (event: React.FormEvent<HTMLInputElement>) => {\n    const {\n      currentTarget: { value },\n    } = event;\n    setValue(value);\n  };\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    console.log(value);\n  };\n\n  return (\n    <>\n      <Title>Hello</Title>\n      <Box>\n        <Emoji as=\"p\">😂</Emoji>\n      </Box>\n      <div>\n        <Emoji>🔥</Emoji>\n        <Btn as=\"a\" href=\"/\">\n          Log in\n        </Btn>\n        <Input />\n      </div>\n      <Circle bgColor=\"red\" />\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"username\"\n          onChange={onChange}\n          value={value}\n        />\n        <button type=\"submit\">Log in</button>\n      </form>\n    </>\n  );\n};\n\nexport default Test;\n","const BASE_URL = `https://api.coinpaprika.com/v1`;\n\nexport function fetchCoins() {\n  return fetch(`${BASE_URL}/coins`).then((response) => response.json());\n}\n\nexport function fetchCoinInfo(coinId: string) {\n  return fetch(`${BASE_URL}/coins/${coinId}`).then((response) =>\n    response.json(),\n  );\n}\n\nexport function fetchCoinTickers(coinId: string) {\n  return fetch(`${BASE_URL}/tickers/${coinId}`).then((response) =>\n    response.json(),\n  );\n}\n\nexport function fetchCoinHistory(coinId: string) {\n  const endDate = Math.floor(Date.now() / 1000);\n  const startDate = endDate - 60 * 60 * 24 * 7 * 2;\n  return fetch(\n    `${BASE_URL}/coins/${coinId}/ohlcv/historical?start=${startDate}&end=${endDate}`,\n  ).then((response) => response.json());\n}\n","import { atom, selector } from \"recoil\";\n\nexport enum Categories {\n  \"TO_DO\" = \"TO_DO\",\n  \"DOING\" = \"DOING\",\n  \"DONE\" = \"DONE\",\n}\n\nexport interface IToDo {\n  text: string;\n  id: number;\n  category: string;\n}\nconst localStorageToDos = localStorage.getItem(\"ToDos\");\nconst parsedToDos = JSON.parse(localStorageToDos as any);\n\nconst localStorageCategories = localStorage.getItem(\"Categories\");\nconst parsedCategories = JSON.parse(localStorageCategories as any);\n\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: parsedToDos ?? [],\n});\n\nexport const categoryState = atom<string>({\n  key: \"category\",\n  default: Categories.TO_DO,\n});\n\nexport const categoriesState = atom<string[]>({\n  key: \"categories\",\n  default: parsedCategories ?? [\n    Categories.TO_DO,\n    Categories.DOING,\n    Categories.DONE,\n  ],\n});\n\nexport const toDoSelector = selector({\n  key: \"toDoSelector\",\n  get: ({ get }) => {\n    const toDos = get(toDoState);\n    const category = get(categoryState);\n    return toDos.filter((toDo) => toDo.category === category);\n  },\n});\n","import { Button } from \"@chakra-ui/react\";\nimport { IoMdArrowRoundBack } from \"react-icons/io\";\nimport { useHistory } from \"react-router\";\n\nconst BackButton = function () {\n  const history = useHistory();\n\n  return (\n    <Button\n      leftIcon={<IoMdArrowRoundBack />}\n      onClick={() => history.goBack()}\n      style={{ position: \"absolute\", left: \"0\", top: \"0\" }}\n    >\n      Back\n    </Button>\n  );\n};\n\nexport default BackButton;\n","import { Button, useColorMode } from \"@chakra-ui/react\";\nimport { FaRegMoon, FaRegSun } from \"react-icons/fa\";\n\nconst ToggleButton = function () {\n  const { colorMode, toggleColorMode } = useColorMode();\n\n  return (\n    <Button\n      rightIcon={colorMode === \"light\" ? <FaRegMoon /> : <FaRegSun />}\n      onClick={toggleColorMode}\n      style={{ position: \"absolute\", right: \"0\", top: \"0\" }}\n    >\n      {colorMode === \"light\" ? \"Dark\" : \"Light\"} Mode\n    </Button>\n  );\n};\n\nexport default ToggleButton;\n","import { useColorMode } from \"@chakra-ui/color-mode\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { useQuery } from \"react-query\";\nimport { fetchCoinHistory } from \"../api\";\n\ninterface ChartProps {\n  coinId: string;\n}\n\ninterface IHistorical {\n  time_open: string;\n  time_close: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  market_cap: number;\n}\n\nconst Chart = function ({ coinId }: ChartProps) {\n  const { colorMode } = useColorMode();\n  const { isLoading, data } = useQuery<IHistorical[]>(\n    [\"ohlcv\", coinId],\n    () => fetchCoinHistory(coinId),\n    {\n      refetchInterval: 10000,\n    },\n  );\n\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading chart...\"\n      ) : (\n        <ReactApexChart\n          type=\"candlestick\"\n          series={[\n            {\n              name: \"Price\",\n              data: data?.map((price) => {\n                const open = price.open.toFixed(2);\n                const high = price.high.toFixed(2);\n                const low = price.low.toFixed(2);\n                const close = price.close.toFixed(2);\n                return {\n                  x: new Date(price.time_open),\n                  y: [open, high, low, close],\n                };\n              }),\n            },\n          ]}\n          options={{\n            theme: {\n              mode: \"dark\",\n            },\n            chart: {\n              height: 300,\n              width: 500,\n              background: \"transparent\",\n            },\n            grid: {\n              show: false,\n            },\n            yaxis: {\n              tooltip: {\n                enabled: true,\n              },\n              labels: {\n                style: {\n                  colors: colorMode === \"dark\" ? \"#fff\" : \"#000\",\n                },\n              },\n            },\n            xaxis: {\n              type: \"datetime\",\n              labels: {\n                datetimeFormatter: {\n                  year: \"yyyy\",\n                  month: \"MMM 'yy\",\n                  day: \"dd MMM\",\n                  hour: \"HH:mm\",\n                },\n                style: {\n                  colors: colorMode === \"dark\" ? \"#fff\" : \"#000\",\n                },\n              },\n            },\n            dataLabels: {\n              formatter: (value: number) => `$${value.toFixed(2)}`,\n            },\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Chart;\n","import { Text } from \"@chakra-ui/layout\";\nimport { fetchCoinTickers } from \"api\";\nimport { useQuery } from \"react-query\";\nimport { useParams } from \"react-router\";\nimport styled from \"styled-components\";\n\nconst Item = styled.div`\n  background-color: rgba(0, 0, 0, 0.2);\n  border-radius: 15px;\n  margin-bottom: 10px;\n  padding: 10px;\n  font-size: 12px;\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst Price = function () {\n  const { coinId } = useParams<RouteParams>();\n  const { isLoading, data: tickersData } = useQuery<PriceData>(\n    [\"tickers\", coinId],\n    () => fetchCoinTickers(coinId),\n  );\n\n  return (\n    <div>\n      {isLoading ? (\n        \"Loading price...\"\n      ) : (\n        <>\n          <Text fontSize=\"4xl\" style={{ padding: \"30px\" }}>\n            Price\n          </Text>\n          <Item>\n            <span>price</span>\n            <span>$ {tickersData?.quotes.USD.price.toFixed(2)}</span>\n          </Item>\n          <Text fontSize=\"4xl\" style={{ padding: \"30px\" }}>\n            Price Change\n          </Text>\n          <Item>\n            <span>15 min</span>\n            <span>\n              {tickersData?.quotes.USD.percent_change_15m.toFixed(2)} %\n            </span>\n          </Item>\n          <Item>\n            <span>30 min</span>\n            <span>\n              {tickersData?.quotes.USD.percent_change_30m.toFixed(2)} %\n            </span>\n          </Item>\n          <Item>\n            <span>1 hour</span>\n            <span>\n              {tickersData?.quotes.USD.percent_change_1h.toFixed(2)} %\n            </span>\n          </Item>\n          <Item>\n            <span>6 hour</span>\n            <span>\n              {tickersData?.quotes.USD.percent_change_6h.toFixed(2)} %\n            </span>\n          </Item>\n          <Item>\n            <span>12 hour</span>\n            <span>\n              {tickersData?.quotes.USD.percent_change_12h.toFixed(2)} %\n            </span>\n          </Item>\n          <Item>\n            <span>24 hour</span>\n            <span>\n              {tickersData?.quotes.USD.percent_change_24h.toFixed(2)} %\n            </span>\n          </Item>\n          <Item>\n            <span>7 day</span>\n            <span>\n              {tickersData?.quotes.USD.percent_change_7d.toFixed(2)} %\n            </span>\n          </Item>\n          <Item>\n            <span>30 day</span>\n            <span>\n              {tickersData?.quotes.USD.percent_change_30d.toFixed(2)} %\n            </span>\n          </Item>\n          <Item>\n            <span>1 year</span>\n            <span>\n              {tickersData?.quotes.USD.percent_change_1y.toFixed(2)} %\n            </span>\n          </Item>\n          <Text fontSize=\"4xl\" style={{ padding: \"30px\" }}>\n            Volumn\n          </Text>\n          <Item>\n            <span>24 hour</span>\n            <span>{tickersData?.quotes.USD.volume_24h.toFixed(0)}</span>\n          </Item>\n          <Item>\n            <span>24 hour change</span>\n            <span>\n              {tickersData?.quotes.USD.volume_24h_change_24h.toFixed(2)} %\n            </span>\n          </Item>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Price;\n","import { fetchCoinInfo, fetchCoinTickers } from \"api\";\nimport BackButton from \"components/BackButton\";\nimport ToggleButton from \"components/ToggleButton\";\nimport { Helmet } from \"react-helmet\";\nimport { useQuery } from \"react-query\";\nimport {\n  Route,\n  Switch,\n  useLocation,\n  useParams,\n  useRouteMatch,\n} from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport Chart from \"./Chart\";\nimport Price from \"./Price\";\n\nconst Title = styled.h1`\n  font-size: 48px;\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n  font-size: 48px;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  width: 100%;\n  margin: 30px;\n`;\n\nconst Header = styled.header`\n  width: 100%;\n  height: 100px;\n  position: relative;\n`;\n\nconst Wrapper = styled.div`\n  max-width: 1000px;\n  margin: 30px auto;\n`;\n\nconst Overview = styled.div`\n  display: flex;\n  justify-content: space-between;\n  background-color: rgba(0, 0, 0, 0.2);\n  padding: 10px 20px;\n  border-radius: 10px;\n`;\n\nconst OverviewItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 33%;\n  span:first-child {\n    font-size: 10px;\n    font-weight: 400;\n    text-transform: uppercase;\n    margin-bottom: 5px;\n  }\n`;\n\nconst Description = styled.p`\n  margin: 20px 0px;\n`;\n\nconst Tabs = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  margin: 25px 0px;\n  gap: 10px;\n`;\n\nconst Tab = styled.span<{ isActive: boolean }>`\n  text-align: center;\n  text-transform: uppercase;\n  font-size: 12px;\n  font-weight: 400;\n  background-color: rgba(0, 0, 0, 0.2);\n  border-radius: 10px;\n  color: ${(props) =>\n    props.isActive ? props.theme.accentColor : props.theme.textColor};\n  a {\n    padding: 7px 0px;\n    display: block;\n  }\n`;\n\nconst Coin = function () {\n  const { coinId } = useParams<RouteParams>();\n  const { state } = useLocation<RouteState>();\n  const priceMatch = useRouteMatch(\"/coin/:coinId/price\");\n  const chartMatch = useRouteMatch(\"/coin/:coinId/chart\");\n  // Object.keys(info).join()\n  // Object.values(info).map(v => typeof v).join() 타입스크립트 타입 추출\n\n  const { isLoading: infoLoading, data: infoData } = useQuery<InfoData>(\n    [\"info\", coinId],\n    () => fetchCoinInfo(coinId),\n  );\n  const { isLoading: tickersLoading, data: tickersData } = useQuery<PriceData>(\n    [\"tickers\", coinId],\n    () => fetchCoinTickers(coinId),\n    {\n      refetchInterval: 5000,\n    },\n  );\n\n  const loading = infoLoading || tickersLoading;\n\n  return (\n    <Container>\n      <Helmet>\n        <title>\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n        </title>\n      </Helmet>\n      <Header>\n        <BackButton />\n        <Title>\n          {state?.name ? state.name : loading ? \"Loading...\" : infoData?.name}\n        </Title>\n        <ToggleButton />\n      </Header>\n      {loading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <Wrapper>\n          <Overview>\n            <OverviewItem>\n              <span>Rank:</span>\n              <span>{infoData?.rank}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Symbol:</span>\n              <span>${infoData?.symbol}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Price:</span>\n              <span>${tickersData?.quotes.USD.price.toFixed(3)}</span>\n            </OverviewItem>\n          </Overview>\n          <Description>{infoData?.description}</Description>\n          <Overview>\n            <OverviewItem>\n              <span>Total Suply:</span>\n              <span>{tickersData?.total_supply}</span>\n            </OverviewItem>\n            <OverviewItem>\n              <span>Max Supply:</span>\n              <span>{tickersData?.max_supply}</span>\n            </OverviewItem>\n          </Overview>\n\n          <Tabs>\n            <Tab isActive={chartMatch !== null}>\n              <Link to={`/coin/${coinId}/chart`}>Chart</Link>\n            </Tab>\n            <Tab isActive={priceMatch !== null}>\n              <Link to={`/coin/${coinId}/price`}>Price</Link>\n            </Tab>\n          </Tabs>\n\n          <Switch>\n            <Route path=\"/coin/:coinId/price\">\n              <Price />\n            </Route>\n            <Route path=\"/coin/:coinId/chart\">\n              <Chart coinId={coinId} />\n            </Route>\n          </Switch>\n        </Wrapper>\n      )}\n    </Container>\n  );\n};\n\nexport default Coin;\n","import { fetchCoins } from \"api\";\nimport ToggleButton from \"components/ToggleButton\";\nimport { Helmet } from \"react-helmet\";\nimport { useQuery } from \"react-query\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  margin: 30px;\n`;\n\nconst Header = styled.header`\n  width: 100%;\n  height: 100%;\n  position: relative;\n`;\n\nconst CoinsList = styled.ul`\n  display: grid;\n  grid-template-columns: auto auto auto auto auto;\n  grid-template-columns: auto auto auto auto auto;\n  grid-gap: 30px;\n  margin: 30px;\n`;\n\nconst Coin = styled.li`\n  background-color: white;\n  border-radius: 15px;\n  margin-bottom: 10px;\n  font-size: 1.2rem;\n  a {\n    display: flex;\n    align-items: center;\n    padding: 20px;\n    transition: color 0.2s ease-in;\n    color: #333;\n  }\n`;\n\nconst Title = styled.h1`\n  font-size: 48px;\n`;\n\nconst Loader = styled.span`\n  text-align: center;\n  display: block;\n  font-size: 48px;\n`;\n\nconst Img = styled.img`\n  width: 35px;\n  height: 35px;\n  margin-right: 10px;\n`;\n\ninterface ICoin {\n  id: string;\n  name: string;\n  symbol: string;\n  rank: number;\n  isNew: boolean;\n  isActive: boolean;\n  type: string;\n}\n\nconst Coins = function () {\n  const { isLoading, data } = useQuery<ICoin[]>(\"allCoins\", fetchCoins);\n\n  return (\n    <Container>\n      <Helmet>\n        <title>Coin Pan 💸</title>\n      </Helmet>\n      <Header>\n        <Title>Coin Pan 💸</Title>\n        <ToggleButton />\n      </Header>\n      {isLoading ? (\n        <Loader>Loading...</Loader>\n      ) : (\n        <CoinsList>\n          {data?.slice(0, 100).map((coin) => (\n            <Coin key={coin.id}>\n              <Link\n                to={{\n                  pathname: `/coin/${coin.id}`,\n                  state: { name: coin.name },\n                }}\n              >\n                <Img\n                  src={`https://cryptoicon-api.vercel.app/api/icon/${coin.symbol.toLowerCase()}`}\n                />\n                {coin.name} &rarr;\n              </Link>\n            </Coin>\n          ))}\n        </CoinsList>\n      )}\n    </Container>\n  );\n};\nexport default Coins;\n","import { Button } from \"@chakra-ui/button\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Select } from \"@chakra-ui/select\";\nimport { FormLabel } from \"@chakra-ui/react\";\nimport { useForm } from \"react-hook-form\";\nimport styled from \"styled-components\";\nimport { useRecoilState } from \"recoil\";\nimport { categoriesState, categoryState } from \"../atoms\";\n\nconst FormContainer = styled.form`\n  display: flex;\n  flex-direction: row;\n  margin-top: 10px;\n  & button {\n    margin-left: 10px;\n  }\n`;\n\ninterface IForm {\n  category: string;\n}\n\nconst Categories = function () {\n  const [category, setCategory] = useRecoilState(categoryState);\n  const [categories, setCategories] = useRecoilState(categoriesState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n\n  const handleValid = ({ category }: IForm) => {\n    const isDuplicated = categories.find((name) => name === category);\n    if (isDuplicated) {\n      window.alert(\"You already have that category name ! \");\n      return;\n    }\n\n    setCategories((oldCategories) => {\n      const newCategories = [category, ...oldCategories];\n      localStorage.setItem(\"Categories\", JSON.stringify(newCategories));\n      return newCategories;\n    });\n    setValue(\"category\", \"\");\n  };\n\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n\n  return (\n    <>\n      <Select value={category} onInput={onInput}>\n        {categories.map((c) => (\n          <option key={Math.random()} value={c}>\n            {c}\n          </option>\n        ))}\n      </Select>\n      <FormContainer onSubmit={handleSubmit(handleValid)}>\n        <FormLabel width=\"200px\">Create Category</FormLabel>\n        <Input\n          {...register(\"category\", {\n            required: \"Please write a category\",\n          })}\n          placeholder=\"Write a category\"\n        />\n        <Button type=\"submit\" colorScheme=\"teal\">\n          Add\n        </Button>\n      </FormContainer>\n    </>\n  );\n};\n\nexport default Categories;\n","import { Button } from \"@chakra-ui/button\";\nimport { Input } from \"@chakra-ui/input\";\nimport { FormLabel } from \"@chakra-ui/react\";\nimport { useForm } from \"react-hook-form\";\nimport styled from \"styled-components\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { categoryState, toDoState } from \"../atoms\";\n\nconst FormContainer = styled.form`\n  display: flex;\n  flex-direction: row;\n  margin-top: 10px;\n  & button {\n    margin-left: 10px;\n  }\n`;\n\ninterface IForm {\n  toDo: string;\n}\n\nconst CreateToDo = function () {\n  const setToDos = useSetRecoilState(toDoState);\n  const category = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const handleValid = ({ toDo }: IForm) => {\n    setToDos((oldToDos) => {\n      const newToDos = [{ text: toDo, id: Date.now(), category }, ...oldToDos];\n\n      localStorage.setItem(\"ToDos\", JSON.stringify(newToDos));\n\n      return newToDos;\n    });\n    setValue(\"toDo\", \"\");\n  };\n  return (\n    <FormContainer onSubmit={handleSubmit(handleValid)}>\n      <FormLabel width=\"200px\">Create To Do</FormLabel>\n      <Input\n        {...register(\"toDo\", {\n          required: \"Please write a To Do\",\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <Button type=\"submit\" colorScheme=\"teal\">\n        Add\n      </Button>\n    </FormContainer>\n  );\n};\n\nexport default CreateToDo;\n","import { Button } from \"@chakra-ui/button\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { Categories, categoriesState, IToDo, toDoState } from \"../atoms\";\n\nconst ToDoWrapper = styled.li`\n  background: rgba(0, 0, 0, 0.2);\n  padding: 20px 40px;\n  border-radius: 4px;\n`;\n\nconst ToDoButton = styled(Button)`\n  margin-left: 10px;\n`;\n\nconst ToDo = function ({ text, category, id }: IToDo) {\n  const setToDos = useSetRecoilState(toDoState);\n  const categories = useRecoilValue(categoriesState);\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDo = { text, id, category: name as any };\n      const newToDoArr = [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n\n      localStorage.setItem(\"ToDos\", JSON.stringify(newToDoArr));\n\n      return newToDoArr;\n    });\n  };\n\n  return (\n    <ToDoWrapper>\n      <span>{text}</span>\n      {categories.map((c) => {\n        if (c !== category) {\n          return (\n            <ToDoButton\n              key={Math.random()}\n              color=\"teal\"\n              name={c}\n              onClick={onClick}\n            >\n              {c}\n            </ToDoButton>\n          );\n        }\n        return null;\n      })}\n    </ToDoWrapper>\n  );\n};\n\nexport default ToDo;\n","import { useRecoilValue } from \"recoil\";\nimport { toDoSelector } from \"atoms\";\nimport styled from \"styled-components\";\nimport { Helmet } from \"react-helmet\";\n\nimport Categories from \"components/Categories\";\nimport CreateToDo from \"components/CreateToDo\";\nimport ToDo from \"components/ToDo\";\nimport BackButton from \"components/BackButton\";\nimport ToggleButton from \"components/ToggleButton\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  width: 100%;\n  margin: 30px;\n`;\n\nconst Header = styled.header`\n  width: 100%;\n  height: 100px;\n  position: relative;\n`;\n\nconst Wrapper = styled.div`\n  max-width: 1000px;\n  margin: 30px auto;\n`;\n\nconst Title = styled.h1`\n  font-size: 48px;\n`;\n\nconst ToDoContainer = styled.ul`\n  margin: 20px;\n  & li {\n    margin: 10px;\n  }s\n`;\n\nconst ToDoList = function () {\n  const toDos = useRecoilValue(toDoSelector);\n\n  return (\n    <Container>\n      <Helmet>\n        <title>To Do List 📚</title>\n      </Helmet>\n      <Header>\n        <BackButton />\n        <Title>To Do List 📚</Title>\n        <ToggleButton />\n      </Header>\n      <Wrapper>\n        <Categories />\n        <CreateToDo />\n        <ToDoContainer>\n          {toDos?.map((toDo) => (\n            <ToDo key={toDo.id} {...toDo} />\n          ))}\n        </ToDoContainer>\n      </Wrapper>\n    </Container>\n  );\n};\n\nexport default ToDoList;\n","import { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport Test from \"routes/Test\";\nimport Coin from \"routes/Coin\";\nimport Coins from \"routes/Coins\";\nimport ToDoList from \"routes/ToDoList\";\n\nconst Router = function () {\n  return (\n    <BrowserRouter basename=\"/react-study-v2\">\n      <Switch>\n        <Route path=\"/test\">\n          <Test />\n        </Route>\n        <Route path=\"/todo\">\n          <ToDoList />\n        </Route>\n        <Route path=\"/coin/:coinId\">\n          <Coin />\n        </Route>\n        <Route path=\"/\">\n          <Coins />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n};\nexport default Router;\n","import styled from \"styled-components\";\nimport Router from \"Router\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100vw;\n  min-height: 100vh;\n  text-align: center;\n  margin: 0;\n`;\n\nconst App = function () {\n  return (\n    <Wrapper>\n      <Router />\n      <ReactQueryDevtools initialIsOpen />\n    </Wrapper>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { theme as defaultTheme, extendTheme } from \"@chakra-ui/react\";\n\nimport { createBreakpoints } from \"@chakra-ui/theme-tools\";\n\nconst breakpoints = createBreakpoints({\n  sm: \"425px\",\n  md: \"768px\",\n  lg: \"960px\",\n  xl: \"1280px\",\n  \"2xl\": \"1440px\",\n});\n\nconst theme = extendTheme({\n  fonts: {\n    heading: `'Inter', ${defaultTheme.fonts.heading}`,\n    body: `'Inter', ${defaultTheme.fonts.body}`,\n  },\n  breakpoints,\n  styles: {\n    global: (props: { colorMode: string }) => ({\n      \"html, body\": {\n        fontSize: \"sm\",\n        backgroundColor: props.colorMode === \"dark\" ? \"gray.800\" : \"gray.100\",\n        color: props.colorMode === \"dark\" ? \"white\" : \"black.600\",\n        lineHeight: \"tall\",\n      },\n      a: {\n        color: props.colorMode === \"dark\" ? \"white\" : \"black.600\",\n        whiteSpace: \"pre\",\n        borderRadius: \"inherit\",\n        _hover: {\n          color: \"teal.500\",\n          boxShadow: \"0px 0px 30px 10px rgb(49, 151, 149, 0.7)\",\n        },\n        _focus: {\n          textDecoration: \"none\",\n          outline: \"none\",\n          border: 0,\n          boxShadow: \"none !important\",\n        },\n      },\n      li: {\n        listStyle: \"none\",\n      },\n    }),\n  },\n});\n\nexport default theme;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport theme from \"./theme\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <QueryClientProvider client={queryClient}>\n        <ChakraProvider resetCSS theme={theme}>\n          <App />\n        </ChakraProvider>\n      </QueryClientProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}